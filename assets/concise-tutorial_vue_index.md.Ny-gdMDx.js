import{_ as e,c as a,o as t,a2 as o}from"./chunks/framework.DOwwFb84.js";const p=JSON.parse('{"title":"vue 简易教程","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"concise-tutorial/vue/index.md","filePath":"concise-tutorial/vue/index.md"}'),i={name:"concise-tutorial/vue/index.md"},r=o('<h1 id="vue-简易教程" tabindex="-1">vue 简易教程 <a class="header-anchor" href="#vue-简易教程" aria-label="Permalink to &quot;vue 简易教程&quot;">​</a></h1><h2 id="vue简介" tabindex="-1">vue简介 <a class="header-anchor" href="#vue简介" aria-label="Permalink to &quot;vue简介&quot;">​</a></h2><p>Vue (发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><h2 id="为什么选择vue" tabindex="-1">为什么选择vue <a class="header-anchor" href="#为什么选择vue" aria-label="Permalink to &quot;为什么选择vue&quot;">​</a></h2><p>从开发者的角度出发，将复杂的东西变得简单易用，无疑是一件非常炫酷且伟大的事情。尤雨溪团队的vue毫无疑问在这一方面遥遥领先于其他两大框架。</p><p>Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用 Vue</p>',6),u=[r];function n(c,s,d,_,l,v){return t(),a("div",null,u)}const m=e(i,[["render",n]]);export{p as __pageData,m as default};
